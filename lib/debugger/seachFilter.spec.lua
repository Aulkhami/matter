local searchFilter = require(script.Parent.searchFilter)
local component = require(script.Parent.Parent.component).newComponent
local World = require(script.Parent.Parent.World)

return function()
	describeFOCUS("Search Filter", function()
		it("should find Oliver", function()
			local world = World.new()
			local Test = component("Test")
			local Friend = component("Friend")
			local Hello = component("Hello")
			world:spawn(Test(), Friend({ name = "Oliver" }))
			world:spawn(Test())
			world:spawn(Friend({ name = "Oscar" }))
			world:spawn(Hello())

			local entities = searchFilter(world, "Friend, !Test, !Hello")

			local _, entity = next(entities)
			expect(entity.id).to.equal(3)
			expect(entity.data["Friend"].name).to.equal("Oscar")
		end)

		it("should find two matching entities", function()
			local world = World.new()
			local Test = component("Test")
			local Friend = component("Friend")
			local Hello = component("Hello")
			world:spawn(Test(), Friend({ name = "Oliver" }))
			world:spawn(Test())
			world:spawn(Friend({ name = "Oscar" }))
			world:spawn(Hello())

			local entities = searchFilter(world, "Friend, !Hello")

			expect(#entities).to.equal(2)
		end)

		it("should error when not querying with any components", function()
			local world = World.new()
			local Test = component("Test")
			local Friend = component("Friend")
			local Hello = component("Hello")
			world:spawn(Test(), Friend({ name = "Oliver" }))
			world:spawn(Test())
			world:spawn(Friend({ name = "Oscar" }))
			world:spawn(Hello())

			expect(function()
				searchFilter(world, "!Friend, !Hello")
			end).to.throw()
		end)

		it("should find multiple Friends", function()
			local world = World.new()
			local Test = component("Test")
			local Friend = component("Friend")
			local Hello = component("Hello")
			world:spawn(Test(), Friend({ name = "Oliver" }))
			world:spawn(Test())
			world:spawn(Friend({ name = "Oscar" }))
			world:spawn(Hello())

			local entities = searchFilter(world, "Friend")
			expect(#entities).to.equal(2)
		end)

		it("should only find one (Friend, Test)", function()
			local world = World.new()
			local Test = component("Test")
			local Friend = component("Friend")
			local Hello = component("Hello")
			local Bye = component("Bye")
			world:spawn(Test(), Friend({ name = "Oliver" }))
			world:spawn(Test(), Hello(), Bye(), Friend())
			world:spawn(Friend({ name = "Oscar" }), Bye())
			world:spawn(Hello())

			local entities = searchFilter(world, "Friend, Test, !Hello")
			print(entities)
			expect(#entities).to.equal(1)
		end)
	end)
end
